/* tslint:disable */
/* eslint-disable */
/**
 * Botapeer API
 * Botapeer API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreatePostFormData } from '../model';
// @ts-ignore
import { ErrorResponse } from '../model';
// @ts-ignore
import { PostResponse } from '../model';
/**
 * PostApi - axios parameter creator
 * @export
 */
export const PostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 投稿記事のLike作成
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLikeToPost: async (plantRecordId: string, postId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantRecordId' is not null or undefined
            assertParamExists('createLikeToPost', 'plantRecordId', plantRecordId)
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('createLikeToPost', 'postId', postId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createLikeToPost', 'userId', userId)
            const localVarPath = `/posts/{postId}/plant_records/{plantRecordId}/users/{userId}/likes`
                .replace(`{${"plantRecordId"}}`, encodeURIComponent(String(plantRecordId)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 投稿作成
         * @param {string} plantRecordId 生育記録ID
         * @param {File} image 
         * @param {CreatePostFormData} [formData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost: async (plantRecordId: string, image: File, formData?: CreatePostFormData, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantRecordId' is not null or undefined
            assertParamExists('createPost', 'plantRecordId', plantRecordId)
            // verify required parameter 'image' is not null or undefined
            assertParamExists('createPost', 'image', image)
            const localVarPath = `/posts/plant_records/{plantRecordId}`
                .replace(`{${"plantRecordId"}}`, encodeURIComponent(String(plantRecordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (formData !== undefined) { 
                localVarFormParams.append('formData', new Blob([JSON.stringify(formData)], { type: "application/json", }));
            }
    
            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 投稿記事のLike削除
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikeToPost: async (plantRecordId: string, postId: string, userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantRecordId' is not null or undefined
            assertParamExists('deleteLikeToPost', 'plantRecordId', plantRecordId)
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('deleteLikeToPost', 'postId', postId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteLikeToPost', 'userId', userId)
            const localVarPath = `/posts/{postId}/plant_records/{plantRecordId}/users/{userId}/likes`
                .replace(`{${"plantRecordId"}}`, encodeURIComponent(String(plantRecordId)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 任意の投稿をplantRecordIdとpostIdから削除
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost: async (plantRecordId: string, postId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantRecordId' is not null or undefined
            assertParamExists('deletePost', 'plantRecordId', plantRecordId)
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('deletePost', 'postId', postId)
            const localVarPath = `/posts/{postId}/plant_records/{plantRecordId}`
                .replace(`{${"plantRecordId"}}`, encodeURIComponent(String(plantRecordId)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 任意の投稿をplantRecordIdとpostIdから取得
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostByIdAndPlantRecordId: async (plantRecordId: string, postId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'plantRecordId' is not null or undefined
            assertParamExists('getPostByIdAndPlantRecordId', 'plantRecordId', plantRecordId)
            // verify required parameter 'postId' is not null or undefined
            assertParamExists('getPostByIdAndPlantRecordId', 'postId', postId)
            const localVarPath = `/posts/{postId}/plant_records/{plantRecordId}`
                .replace(`{${"plantRecordId"}}`, encodeURIComponent(String(plantRecordId)))
                .replace(`{${"postId"}}`, encodeURIComponent(String(postId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostApi - functional programming interface
 * @export
 */
export const PostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostApiAxiosParamCreator(configuration)
    return {
        /**
         * 投稿記事のLike作成
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLikeToPost(plantRecordId: string, postId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLikeToPost(plantRecordId, postId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 投稿作成
         * @param {string} plantRecordId 生育記録ID
         * @param {File} image 
         * @param {CreatePostFormData} [formData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPost(plantRecordId: string, image: File, formData?: CreatePostFormData, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPost(plantRecordId, image, formData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 投稿記事のLike削除
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteLikeToPost(plantRecordId: string, postId: string, userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteLikeToPost(plantRecordId, postId, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 任意の投稿をplantRecordIdとpostIdから削除
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePost(plantRecordId: string, postId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePost(plantRecordId, postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 任意の投稿をplantRecordIdとpostIdから取得
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPostByIdAndPlantRecordId(plantRecordId: string, postId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPostByIdAndPlantRecordId(plantRecordId, postId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostApi - factory interface
 * @export
 */
export const PostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostApiFp(configuration)
    return {
        /**
         * 投稿記事のLike作成
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLikeToPost(plantRecordId: string, postId: string, userId: string, options?: any): AxiosPromise<PostResponse> {
            return localVarFp.createLikeToPost(plantRecordId, postId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 投稿作成
         * @param {string} plantRecordId 生育記録ID
         * @param {File} image 
         * @param {CreatePostFormData} [formData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPost(plantRecordId: string, image: File, formData?: CreatePostFormData, options?: any): AxiosPromise<PostResponse> {
            return localVarFp.createPost(plantRecordId, image, formData, options).then((request) => request(axios, basePath));
        },
        /**
         * 投稿記事のLike削除
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {string} userId ユーザーID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteLikeToPost(plantRecordId: string, postId: string, userId: string, options?: any): AxiosPromise<PostResponse> {
            return localVarFp.deleteLikeToPost(plantRecordId, postId, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 任意の投稿をplantRecordIdとpostIdから削除
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePost(plantRecordId: string, postId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePost(plantRecordId, postId, options).then((request) => request(axios, basePath));
        },
        /**
         * 任意の投稿をplantRecordIdとpostIdから取得
         * @param {string} plantRecordId 生育記録ID
         * @param {string} postId 投稿ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPostByIdAndPlantRecordId(plantRecordId: string, postId: string, options?: any): AxiosPromise<PostResponse> {
            return localVarFp.getPostByIdAndPlantRecordId(plantRecordId, postId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export class PostApi extends BaseAPI {
    /**
     * 投稿記事のLike作成
     * @param {string} plantRecordId 生育記録ID
     * @param {string} postId 投稿ID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public createLikeToPost(plantRecordId: string, postId: string, userId: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).createLikeToPost(plantRecordId, postId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 投稿作成
     * @param {string} plantRecordId 生育記録ID
     * @param {File} image 
     * @param {CreatePostFormData} [formData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public createPost(plantRecordId: string, image: File, formData?: CreatePostFormData, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).createPost(plantRecordId, image, formData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 投稿記事のLike削除
     * @param {string} plantRecordId 生育記録ID
     * @param {string} postId 投稿ID
     * @param {string} userId ユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public deleteLikeToPost(plantRecordId: string, postId: string, userId: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).deleteLikeToPost(plantRecordId, postId, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 任意の投稿をplantRecordIdとpostIdから削除
     * @param {string} plantRecordId 生育記録ID
     * @param {string} postId 投稿ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public deletePost(plantRecordId: string, postId: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).deletePost(plantRecordId, postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 任意の投稿をplantRecordIdとpostIdから取得
     * @param {string} plantRecordId 生育記録ID
     * @param {string} postId 投稿ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    public getPostByIdAndPlantRecordId(plantRecordId: string, postId: string, options?: AxiosRequestConfig) {
        return PostApiFp(this.configuration).getPostByIdAndPlantRecordId(plantRecordId, postId, options).then((request) => request(this.axios, this.basePath));
    }
}
