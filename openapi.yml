openapi: 3.0.0
info:
  title: Botapeer API
  description: Botapeer API
  version: 1.0.0
servers:
  - url: http://localhost:8081/api
  - url: http://api.botapeer.com/api
paths:
  '/users':
    get:
      operationId: getUsersOrGetUserByName
      tags:
        - User
      description: User一覧もしくは名前からユーザーを取得
      parameters:
        - in: query
          name: username
          description: ユーザー名
          required: false
          schema:
            type: string
            example: taro
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '404':
          description: 404(User Not Found)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
  '/users/{userId}':
    get:
      operationId: findUserById
      tags:
        - User
      description: 任意のUserをuserIdから取得
      parameters:
        - in: path
          name: userId
          description: ユーザーID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 404(User Not Found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
    patch:
      operationId: updateUser
      tags:
        - User
      description: 任意のUserをuserIdから更新
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          description: ユーザーID
          required: true
          schema:
            type: string
            example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                formData:
                  $ref: '#/components/schemas/UpdateUserFormData'
                profileImage:
                  type: string
                  format: binary
                coverImage:
                  type: string
                  format: binary
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: 401(Unauthorized)
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deleteUser
      tags:
        - User
      description: 任意のUserをuserIdから削除
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          description: ユーザーID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
        '401':
          description: 401(Unauthorized)
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'                
  '/users/plant_records/{plantRecordId}':
    get:
      operationId: findUserByPlantRecordId
      tags:
        - User
      description: 任意のUserをPlantRecordIdから取得
      parameters:
        - in: path
          name: plantRecordId
          description: 生育記録ID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: 404(User Not Found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'                
  '/auth/signin':
    post:
      operationId: signin
      tags:
        - Auth
      description: サインイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/SignInRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '404':
          description: 404(User Not Found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/auth/signup':
    post:
      operationId: createUser
      tags:
        - Auth
      description: サインアップ
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/plant_records/{plantRecordId}':
    get:
      operationId: getPlantRecordById
      tags:
        - PlantRecord
      description: 任意の生育記録をplantRecordIdから取得
      parameters:
        - in: path
          name: plantRecordId
          description: 生育記録ID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantRecordResponse'
        '404':
          description: 404(PlantRecord Not Found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
  '/plant_records/users/{userId}':
    get:
      operationId: getPlantRecordByUserId
      tags:
        - PlantRecord
      description: 任意の生育記録をuserIdから取得
      parameters:
        - in: path
          name: userId
          description: ユーザーID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlantRecordResponse'
        '404':
          description: 404(PlantRecord Not Found)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
  '/plant_records':
    post:
      operationId: createPlantRecord
      tags:
        - PlantRecord
      description: 生育記録作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/CreatePlantRecordRequest'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlantRecordResponse'
        '401':
          description: 401(Unauthorized)
          headers:
            http_status:
              description: HTTPステータス
              schema:
                type: integer
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/posts/plant_records/{plantRecordId}':
    post:
      operationId: createPost
      tags:
        - Post
      description: 投稿作成
      parameters:
        - in: path
          name: plantRecordId
          description: 生育記録ID
          required: true
          schema:
            type: string
            example: 1
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                formData:
                  $ref: '#/components/schemas/CreatePostFormData'
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: 401(Unauthorized)
          headers:
            http_status:
              description: HTTPステータス
              schema:
                type: integer
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'          
  '/posts/{postId}/plant_records/{plantRecordId}':
    get:
      operationId: getPostByIdAndPlantRecordId
      tags:
        - Post
      description: 任意の投稿をplantRecordIdとpostIdから取得
      parameters:
        - in: path
          name: plantRecordId
          description: 生育記録ID
          required: true
          schema:
            type: string
            example: 1
        - in: path
          name: postId
          description: 投稿ID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/PostResponse'
        '404':
          description: 404(User Not Found)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
    delete:
      operationId: deletePost
      tags:
        - Post
      description: 任意の投稿をplantRecordIdとpostIdから削除
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: plantRecordId
          description: 生育記録ID
          required: true
          schema:
            type: string
            example: 1
        - in: path
          name: postId
          description: 投稿ID
          required: true
          schema:
            type: string
            example: 1
      responses:
        '200':
          description: ok
        '404':
          description: 404(Post Not Found)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'  
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ErrorResponse'
  '/posts/{postId}/plant_records/{plantRecordId}/likes':
    post:
      operationId: createLikeToPost
      tags:
        - Post
      description: 投稿記事のLike作成
      parameters:
        - in: path
          name: plantRecordId
          description: 生育記録ID
          required: true
          schema:
            type: string
            example: 1
        - in: path
          name: postId
          description: 投稿ID
          required: true
          schema:
            type: string
            example: 1            
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: string
              required:
                - userId
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          description: 401(Unauthorized)
          headers:
            http_status:
              description: HTTPステータス
              schema:
                type: integer
        '405':
          description: 405(Validation exception)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/places':
    get:
      operationId: getPlaces
      tags:
        - Place
      description: 置き場所取得
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: '#/components/schemas/PlaceResponse'
components:
  schemas:
    UpdateUserFormData:
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        description:
          type: string
      required:
        - name
        - email
    UserResponse:
      properties:
        id:
          type: integer
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
        status:
          type: integer
        description:
          type: string
        profileImage:
          type: string
        coverImage:
          type: string
    PlantRecordResponse:
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
          minLength: 1
          maxLength: 40
        alive:
          type: integer
        endDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        place:
            $ref: '#/components/schemas/PlaceResponse'
        posts:
          type: array
          items:
            $ref: '#/components/schemas/PostResponse'
    PlaceResponse:
      properties:
          id:
            type: integer
            format: int64
          name:
            type: string
    PostResponse:
      properties:
          id:
            type: integer
            format: int64
          plantRecordId:
            type: integer
            format: int64
          title:
            type: string
          article:
            type: string
          imageUrl:
            type: string
          status:
            type: integer
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
          likes:
            type: array
            items:
              $ref: '#/components/schemas/LikeResponse'
    LikeResponse:
      properties:
        id:
          type: integer
          format: int64
        userId:
          type: integer
        postId:
          type: integer
        commentId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - userId
    SignInRequest:
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
      required:
        - usernameOrEmail
        - password
    JwtAuthenticationResponse:
      properties:
        accessToken:
          type: string
        tokenType:
          type: string
      required:
        - accessToken
        - tokenType
    CreateUserRequest:
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 15
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 20
      required:
        - name
        - email
        - password
    CreatePlantRecordRequest:
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 40
        placeId:
          type: integer
          format: int64
      required:
        - name
        - email
        - password
    CreatePostFormData:
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 40
        article:
          type: string
          minLength: 1
          maxLength: 10000
      required:
        - title
        - article
    ErrorResponse:
      properties:
        errors:
          $ref: '#/components/schemas/Error'
    Error:
        type: array
        items:
          properties:
            code:
              type: integer
            message:
              type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT